# Zero-Shot Prompt Practice
# Email Writing
prompt: "Write a professional email to stakeholders explaining a 2-week delay in the WhatsApp integration project. Include an apology, brief explanation of technical challenges, revised timeline, and next steps. Keep the tone professional but reassuring."
ai_response: "[Subject: WhatsApp Integration Project ‚Äì Revised Timeline and Next Steps

Dear Stakeholders,

I hope this message finds you well.

I‚Äôm writing to inform you that the WhatsApp integration project will be delayed by approximately two weeks. I sincerely apologize for this shift and any inconvenience it may cause.

The delay is due to a combination of technical challenges, including unexpected complexities in message routing and API authentication. Our development team is actively addressing these issues to ensure a secure and seamless integration that meets our quality and compliance standards.

We now anticipate completing the integration by [insert revised date], with testing and deployment to follow shortly thereafter.

Next Steps:

Finalize API configuration and security validation by [insert date]
Conduct end-to-end testing and QA by [insert date]
Prepare training and deployment materials for customer service teams
We remain committed to delivering a robust solution and will keep you updated on progress. Please feel free to reach out if you have any questions or would like to discuss the revised timeline in more detail.

Thank you for your continued support and understanding.

Warm regards,
Sumaya Baccus
Business Analyst]"


# Meeting Summary
prompt: "Create a concise meeting summary with the following structure: Key Decisions, Action Items (with owners and deadlines), and Next Meeting Date. Write it for a project status meeting about implementing WhatsApp customer service capabilities."
ai_response: "[Test this prompt and paste the response here]"

# Technical Documentation:
prompt: "Write a brief technical requirements document for integrating WhatsApp Business API into an existing customer service system. Include sections for: Overview, Technical Requirements, Integration Points, and Success Criteria. Use bullet points and keep it under 300 words."
ai_response: "[Test this prompt and paste the response here]"

# One-Shot Prompt Practice
# Code Review Comment
prompt: |
  Write a constructive code review comment for a pull request. Here's an example:
  
  Example: "Great work on implementing the user authentication! I noticed the password validation could be strengthened by adding a check for special characters. Consider using a regex pattern like /^(?=.*[!@#$%^&*])/ to ensure at least one special character. This would align with our security standards. Otherwise, the logic flow looks solid!"
  
  Now write a similar code review comment for a WhatsApp integration module that has good error handling but lacks proper logging.
ai_response: "[Test this prompt and paste the response here]"

# User Story Writing
prompt: |
  Write a user story following this format:
  
  Example: "As a customer service manager, I want to view real-time chat metrics on a dashboard so that I can monitor team performance and identify bottlenecks during peak hours. Acceptance criteria: Dashboard updates every 30 seconds, shows active chats, average response time, and agent availability."
  
  Now write a user story for a customer who wants to receive automated WhatsApp notifications about their order status.
ai_response: "[Test this prompt and paste the response here]"

# Bug Report
prompt: |
  Write a detailed bug report using this structure:
  
  Example: "**Title:** Login form validation fails with special characters
  **Environment:** Chrome 120, Windows 11, Production
  **Steps to Reproduce:** 1) Navigate to login page 2) Enter email with + symbol 3) Click submit
  **Expected Result:** User should be logged in successfully
  **Actual Result:** Error message 'Invalid email format' appears
  **Priority:** Medium - affects users with email aliases"
  
  Now write a bug report for WhatsApp messages not being delivered during peak hours.
ai_response: "[Test this prompt and paste the response here]"

# Status Update Email
prompt: |
  Write a project status update email following this example:
  
  Example: "Subject: Weekly Update - Mobile App Redesign Project
  
  Hi Team,
  
  Here's our progress update for Week 12:
  
  ‚úÖ **Completed:** User interface mockups for login and dashboard screens
  ‚úÖ **In Progress:** Backend API integration (60% complete)
  ‚ö†Ô∏è **Blocked:** Waiting for design approval on payment flow
  üìÖ **Next Week:** Complete API integration, begin user testing preparation
  
  Risk: Design approval delay may push testing back 3 days. Mitigation: Parallel work on other screens.
  
  Questions or concerns? Let's discuss in our Friday standup.
  
  Best regards,
  Sarah"
  
  Now write a status update email for the WhatsApp integration project covering week 8 of development.
ai_response: "[Test this prompt and paste the response here]"
‚úÖ Code Review Comment
Prompt:
Write a constructive code review comment for a WhatsApp integration module that has good error handling but lacks proper logging.

AI Response:
"Nice job on implementing robust error handling in the WhatsApp integration module! One area for improvement is logging‚Äîcurrently, there‚Äôs limited visibility into the flow and failure points. Consider adding structured logs at key stages (e.g., message send attempt, API response, and fallback logic) using our standard logging utility. This will help with debugging and monitoring in production. Otherwise, the error management logic looks solid!"

‚úÖ User Story Writing
Prompt:
Write a user story for a customer who wants to receive automated WhatsApp notifications about their order status.

AI Response:
"As an online shopper, I want to receive automated WhatsApp notifications about my order status so that I can stay informed without checking the website manually.
Acceptance Criteria:

Notifications are sent for order confirmation, dispatch, and delivery
Messages include order ID and estimated delivery time
Opt-in and opt-out options are available in the user profile settings"
‚úÖ Bug Report
Prompt:
Write a bug report for WhatsApp messages not being delivered during peak hours.

AI Response:
Title: WhatsApp messages fail to deliver during peak hours
Environment: WhatsApp Business API v2.45, Production, AWS EU-West
Steps to Reproduce:

Send a message via the WhatsApp integration between 6 PM and 8 PM
Observe delivery status in logs or customer interface
Retry message outside peak hours
Expected Result:
Messages should be delivered promptly regardless of time.

Actual Result:
Messages remain in "pending" state or fail with timeout errors during peak hours.

Priority: High ‚Äì impacts customer communication and SLA compliance

‚úÖ Status Update Email
Prompt:
Write a status update email for the WhatsApp integration project covering week 8 of development.

AI Response:
Subject: Week 8 Update ‚Äì WhatsApp Integration Project

Hi Team,

Here‚Äôs the progress update for Week 8:

‚úÖ Completed:

API authentication and webhook setup
Initial error handling framework
üîß In Progress:

Message delivery logic (70% complete)
Logging and monitoring enhancements
‚ö†Ô∏è Blocked:

Rate limiting tests pending due to sandbox instability
üìÖ Next Week:

Finalize message delivery module
Begin UAT preparation and documentation
Risk: Delay in sandbox testing may impact UAT readiness.
Mitigation: Exploring alternative test environments and mock services.

Let me know if you have any questions or need further details.

Best regards,
Sumaya
# Observations
response_quality_differences: "[Add your observations about response quality differences]"
pattern_influence: "[Note any patterns in how examples influenced outputs]"
task_benefits: "[Record which types of tasks benefited most from examples]"

best_practices:
effective_examples: "[Your insights about crafting effective examples]"
choosing_examples: "[Tips for choosing representative examples]"
when_to_use: "[When one-shot works better than zero-shot]"
# Few-Shot Prompt Practice
# API Documentation
prompt: |
  Write API endpoint documentation following these examples:
  
  Example 1:
  POST /api/users
  Purpose: Create a new user account
  Parameters: email (string, required), password (string, required), name (string, optional)
  Response: 201 Created with user object, 400 Bad Request if validation fails
  
  Example 2:
  GET /api/orders/{id}
  Purpose: Retrieve order details by ID
  Parameters: id (integer, required, path parameter)
  Response: 200 OK with order object, 404 Not Found if order doesn't exist
  
  Example 3:
  DELETE /api/sessions/{token}
  Purpose: Logout user and invalidate session
  Parameters: token (string, required, path parameter)
  Response: 204 No Content on success, 401 Unauthorized if token invalid
  
  Now write documentation for a WhatsApp webhook endpoint that receives message status updates.
ai_response: "[Test this prompt and paste the response here]"

# Test Case Writing:
prompt: |
  Write test cases following these examples:
  
  Example 1:
  Test ID: TC001
  Feature: User Registration
  Scenario: Valid email registration
  Given: User is on registration page
  When: User enters valid email "test@example.com" and password "SecurePass123!"
  Then: Account is created and confirmation email is sent
  
  Example 2:
  Test ID: TC002
  Feature: Password Reset
  Scenario: Reset with invalid email
  Given: User is on password reset page
  When: User enters non-existent email "fake@nowhere.com"
  Then: Generic message "If email exists, reset link sent" is displayed
  
  Example 3:
  Test ID: TC003
  Feature: File Upload
  Scenario: Upload oversized file
  Given: User has file larger than 10MB
  When: User attempts to upload the file
  Then: Error message "File size exceeds 10MB limit" is shown
  
  Now write test cases for WhatsApp message delivery failure scenarios.
ai_response: "[Test this prompt and paste the response here]"

# Product Requirements
prompt: |
  Write a product requirement section following these examples:
  
  Example 1:
  REQ-001: User Authentication
  Priority: High
  Description: Users must authenticate using email and password
  Acceptance Criteria:
  - Login form validates email format
  - Password must be 8+ characters with special character
  - Failed login attempts locked after 5 tries
  - Session expires after 2 hours of inactivity
  Dependencies: None
  
  Example 2:
  REQ-002: Order Tracking
  Priority: Medium  
  Description: Customers can track order status in real-time
  Acceptance Criteria:
  - Order status updates automatically
  - Tracking page shows current location
  - Email notifications sent on status changes
  - Estimated delivery time displayed
  Dependencies: REQ-001, Payment Gateway Integration
  
  Example 3:
  REQ-003: Mobile Responsiveness
  Priority: Medium
  Description: Application adapts to mobile screen sizes
  Acceptance Criteria:
  - Works on devices 320px width and above
  - Touch-friendly button sizes (44px minimum)
  - Readable text without horizontal scrolling
  - Fast loading on 3G connections
  Dependencies: REQ-001, REQ-002
  
  Now write a requirement for WhatsApp message template management functionality.
ai_response: "[Test this prompt and paste the response here]"
üìò API Documentation
Prompt:
Write API endpoint documentation for a WhatsApp webhook endpoint that receives message status updates.

AI Response:

POST /api/webhooks/whatsapp/status

Purpose:  
Receive real-time status updates for WhatsApp messages sent via the Business API.

Parameters:  
- message_id (string, required): Unique identifier of the WhatsApp message  
- status (string, required): Current status of the message (e.g., sent, delivered, read, failed)  
- recipient_id (string, required): WhatsApp ID of the message recipient  
- timestamp (string, required): ISO 8601 formatted timestamp of the status update  
- error_code (integer, optional): Error code if the message failed  
- error_description (string, optional): Description of the error if applicable

Response:  
- 200 OK if the status update is successfully processed  
- 400 Bad Request if required parameters are missing or malformed  
- 403 Forbidden if the request is unauthorized  
‚úÖ Test Case Writing
Prompt:
Write test cases for WhatsApp message delivery failure scenarios.

AI Response:

Test ID: TC201  
Feature: WhatsApp Message Delivery  
Scenario: Delivery fails due to invalid recipient number  
Given: A message is sent to an invalid WhatsApp number  
When: The system attempts to deliver the message  
Then: The message status is marked as "failed" and an error code is logged

Test ID: TC202  
Feature: WhatsApp Message Delivery  
Scenario: Delivery fails due to expired access token  
Given: The system's WhatsApp API token has expired  
When: A message is sent  
Then: The API returns a 401 error and the message is not delivered

Test ID: TC203  
Feature: WhatsApp Message Delivery  
Scenario: Delivery fails due to network timeout  
Given: The WhatsApp API is temporarily unreachable  
When: A message is sent  
Then: The system retries the request and logs a timeout error if all retries fail
üìÑ Product Requirements
Prompt:
Write a requirement for WhatsApp message template management functionality.

AI Response:

REQ-004: WhatsApp Message Template Management  
Priority: High  
Description: Admin users must be able to manage WhatsApp message templates used for outbound communication.

Acceptance Criteria:  
- Admins can create, edit, and delete message templates  
- Templates support placeholders (e.g., {{customer_name}}, {{order_id}})  
- Templates must be submitted for WhatsApp approval before use  
- Only approved templates are available for selection in outbound workflows  
- Templates are categorized by use case (e.g., order updates, reminders, promotions)

Dependencies: WhatsApp Business API, Admin Portal Authentication
# Few-Shot Pattern Analysis
# Pattern_observations:
formatting_consistency: "[How well did AI follow complex formatting patterns?]"
pattern_types: "[Which types of patterns worked best with multiple examples?]"
quantity_vs_quality: "[Did more examples always improve quality?]"

# Best Practices
example_selection: "[Your insights about example selection and ordering]"
consistency_vs_variation: "[How to balance consistency with variation]"
advantages_over_one_shot: "[When few-shot provides significant advantages over one-shot]"

# Professional Ppplications
technical_documentation: "[Where few-shot prompting excels in technical documentation]"
specialized_formats: "[How multiple examples help with specialized formats]"
Pattern Observations
formatting_consistency:
The AI followed formatting patterns very well when examples were clearly structured and labeled. Consistent use of headers (e.g., "Test ID", "Feature", "Scenario") and bullet points helped the model replicate the format accurately across different domains like test cases, API docs, and product requirements.

pattern_types:
Patterns that included both structure and content guidance (e.g., user stories, test cases, API docs) worked best. These examples provided a clear scaffold for the AI to follow, especially when the format was repeated across multiple examples.

quantity_vs_quality:
More examples generally improved quality when they were diverse but still aligned in structure. Three examples seemed to be a sweet spot‚Äîenough to establish a pattern without overwhelming or diluting the prompt.

‚úÖ Best Practices
example_selection:
Choose examples that are:

Representative of the range of expected inputs
Varied in content but consistent in structure
Clear in intent and free of ambiguity
Ordering matters too‚Äîstarting with the most typical or foundational example helps set expectations.

consistency_vs_variation:
Maintain structural consistency (e.g., headers, bullet points) while varying content (e.g., different features or scenarios). This helps the model generalize the format without overfitting to specific content.

advantages_over_one-shot:
Few-shot prompting is especially advantageous when:

The format is complex or domain-specific
The task requires both structure and nuance (e.g., bug reports, product specs)
You want to guide tone, style, and level of detail
üíº Professional Applications
technical_documentation:
Few-shot prompting excels in generating:

API documentation
Integration guides
Configuration instructions
It ensures consistency across endpoints or modules while adapting to specific parameters.
specialized_formats:
Multiple examples are particularly helpful for:

Compliance checklists
QA test cases
User stories and acceptance criteria
They help the model internalize domain-specific language and formatting expectations.

